sizevar='Val', colorvar='Fac')
plot(P1)
P1 = gvisTreeMap(Regions, idvar='Region', parentvar='Parent',
sizevar='Val', colorvar='Fac')
plot(P1)
df = data.frame(Term=c('1','2','3'),
President=c('Washington','Adams','Jefferson'),
start=as.Date(x=c('1789-03-29','1797-02-03','1801-02-03'))
end=as.Date(x=c('1797-02-03','1801-02-03','1809-02-03')))
P3 = gvisTable(Population)
plot(P3)
P4 = gvisScatterChart(women)
plot(P4)
df = data.frame(From = c(rep('A', 3), rep('B', 3)),
To = c(rep('X','Y','Z')),
Weight = c(5,7,6,2,9,4))
df = data.frame(From = c(rep('A', 3), rep('B', 3)),
To = c(rep(c('X','Y','Z'), 3),
Weight = c(5,7,6,2,9,4))
View(df)
df = data.frame(From = c(rep('A', 3), rep('B', 3)),
To = c(rep(c('X','Y','Z'), 3),
Weight = c(5,7,6,2,9,4)))
P6 = gvisPieChart(CityPopularity)
plot(P6)
P8 = visMap(Andrew, 'LatLong', 'Trip',
options=list(showTip=TRUE, showline=TRUE, enableScrollWheel=TRUE),
useMapTypeControl=TRUE,
width=800, height=400)
plot(P8)
P8 = gvisMap(Andrew, 'LatLong', 'Trip',
options=list(showTip=TRUE, showline=TRUE, enableScrollWheel=TRUE),
useMapTypeControl=TRUE,
width=800, height=400)
plot(P8)
P8 = gvisMap(Andrew, 'LatLong', 'Trip',
options=list(showTip=TRUE, showline=TRUE, enableScrollWheel=TRUE),
useMapTypeControl=TRUE,
width=800, height=400))
plot(P8)
width=800, height=400))
width = 800, height = 400))
df = data.frame(country=c('US','GB','BR'),
val1=c(1,3,4), val2=c(23,12,32))
View(df)
high = 'high')
P11 = gvisCanlestickChart(OpenClose, xvar='weekday', low='low',
open = 'Open', close = 'Close',
high = 'High')
P11 = gvisCanleStickChart(OpenClose, xvar='weekday', low='low',
open = 'Open', close = 'Close',
high = 'High')
P11 = gvisCandlestickChart(OpenClose, xvar='weekday', low='low',
open = 'Open', close = 'Close',
high = 'High')
P12 = gvisCalendar(Cairo)
plot(P12)
P12 = gvisCalendar(Cairo, datevar='Date', numvar='Temp')
plot(P12)
df <- read.csv("/Users/kelvinabrokwa/Documents/R/Cornut.Data.2011.csv")
df <- read.csv("/Users/kelvinabrokwa/Documents/R/Cornut.Data.2011.csv")
names(df)[names(df) == "qg705"] <- "Methodology"
df <- subset(df, select = c(country, Methodology))
df <- df[!(df$Methodology %in% c("")),]
df <- count(df, vars = c("country", "Methodology"))
names(df)[names(df) == "freq"] <- "Frequency"
df <- ddply(.data = df, .variables = .(country), mutate,
Proportion = Frequency/sum(Frequency))
#df1 <- df[(df$Paradigm %in% "Realism"),]
G <- gvisGeoMap(df, locationvar='country' ,numvar='Proportion', hovervar="Methodology",
options=list(dataMode='markers', showZoomOut = FALSE,
colorAxis="{values:[100,250,650,1000],
colors:[\'red', \'pink\', \'orange',\'green']}"))
plot(G)
GM <- gvisMerge(G, M, horizontal=TRUE,
tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
plot(GM)
A <- gvisGeoMap(df, locationvar='country' ,numvar='Proportion', hovervar="Methodology",
options=list(dataMode='regions', datamode = "markers", showZoomOut = FALSE,
colorAxis="{values:[100,250,650,1000],
colors:[\'red', \'pink\', \'orange',\'green']}"))
plot(A)
mtcars %x%
ggvis(~wt, ~mpg,
size := imput_slider(10,100),
opacity := input_slider(0,1)) %x%
layer_points()
isntall.packages('ggvis')
install.packages('ggvis')
install.packages('ggvis')
library(ggvis)
mtcars %x%
ggvis(~wt, ~mpg,
size := imput_slider(10,100),
opacity := input_slider(0,1)) %x%
layer_points()
mtcars %x%
ggvis(~wt, ~mpg,
size := input_slider(10,100),
opacity := input_slider(0,1)) %x%
layer_points()
mtcars %x%
ggvis(~wt) %x%
layer_histograms(binwidth = input_slider(0.2, step = 0.1))
library(googleVis)
library(zoo)
library(dplyr)
library(plyr)
df <- read.csv("/Users/kelvinabrokwa/Documents/R/Journal Article Database 1.0.csv")
###############Basic motion polt##################
df <- subset(df, select = c(year, Quantitative, Qualitative, FormalModeling, Counterfactual,
AnalyticNonFormal, PolicyAnalysis, Experimental, Descriptive ))
df$Quantitative <- ifelse(df$Quantitative == "Yes", c("Quantitative"), c("No"))
df$Qualitative <- ifelse(df$Qualitative == "Yes", c("Qualitative"), c("No"))
df$FormalModeling <- ifelse(df$FormalModeling == "Yes", c("FormalModeling"), c("No"))
df$Counterfactual <- ifelse(df$Counterfactual == "Yes", c("Counterfactual"), c("No"))
df$AnalyticNonFormal <- ifelse(df$AnalyticNonFormal == "Yes", c("AnalyticNonFormal"), c("No"))
df$Descriptive <- ifelse(df$Descriptive == "Yes", c("Descriptive"), c("No"))
df$PolicyAnalysis <- ifelse(df$PolicyAnalysis == "Yes", c("PolicyAnalysis"), c("No"))
df$Experimental <- ifelse(df$Experimental == "Yes", c("Experimental"), c("No"))
df1 <- count(df, vars = c("year", "Quantitative"))
df2 <- count(df, vars = c("year", "Qualitative"))
df3 <- count(df, vars = c("year", "FormalModeling"))
df4 <- count(df, vars = c("year", "Counterfactual"))
df5 <- count(df, vars = c("year", "AnalyticNonFormal"))
df6 <- count(df, vars = c("year", "Descriptive"))
df7 <- count(df, vars = c("year", "PolicyAnalysis"))
df8 <- count(df, vars = c("year", "Experimental"))
names(df1)[names(df1) == "freq"] <- "Frequency"
names(df2)[names(df2) == "freq"] <- "Frequency"
names(df3)[names(df3) == "freq"] <- "Frequency"
names(df4)[names(df4) == "freq"] <- "Frequency"
names(df5)[names(df5) == "freq"] <- "Frequency"
names(df6)[names(df6) == "freq"] <- "Frequency"
names(df7)[names(df7) == "freq"] <- "Frequency"
names(df8)[names(df8) == "freq"] <- "Frequency"
names(df1)[names(df1) == "Quantitative"] <- "Methodology"
names(df2)[names(df2) == "Qualitative"] <- "Methodology"
names(df3)[names(df3) == "FormalModeling"] <- "Methodology"
names(df4)[names(df4) == "Counterfactual"] <- "Methodology"
names(df5)[names(df5) == "AnalyticNonFormal"] <- "Methodology"
names(df6)[names(df6) == "Descriptive"] <- "Methodology"
names(df7)[names(df7) == "PolicyAnalysis"] <- "Methodology"
names(df8)[names(df8) == "Experimental"] <- "Methodology"
df1 <- ddply(.data = df1, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
df2 <- ddply(.data = df2, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
df3 <- ddply(.data = df3, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
df4 <- ddply(.data = df4, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
df5 <- ddply(.data = df5, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
df6 <- ddply(.data = df6, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
df7 <- ddply(.data = df7, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
df8 <- ddply(.data = df8, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
#combine <- ddply(.data = df7, .variables = .(Frequency), mutate,
#Average = SMA(Frequency, n=3))
df1 <- subset(df1, !( Methodology=="No"))
df2 <- subset(df2, !( Methodology=="No"))
df3 <- subset(df3, !( Methodology=="No"))
df4 <- subset(df4, !( Methodology=="No"))
df5 <- subset(df5, !( Methodology=="No"))
df6 <- subset(df6, !( Methodology=="No"))
df7 <- subset(df7, !( Methodology=="No"))
df8 <- subset(df8, !( Methodology=="No"))
d1 <- loess(Proportion ~ year, df1)
df1$Predict <- predict(d1, df1)
d2 <- loess(Proportion ~ year, df2)
df2$Predict <- predict(d2, df2)
d3 <- loess(Proportion ~ year, df3)
df3$Predict <- predict(d3, df3)
d4 <- loess(Proportion ~ year, df4)
df4$Predict <- predict(d4, df4)
d5 <- loess(Proportion ~ year, df5)
df5$Predict <- predict(d5, df5)
d6 <- loess(Proportion ~ year, df6)
df6$Predict <- predict(d6, df6)
d7 <- loess(Proportion ~ year, df7)
df7$Predict <- predict(d7, df7)
d8 <- loess(Proportion ~ year, df8)
df8$Predict <- predict(d8, df8)
df9 <- rbind.fill(df1[c("year", "Methodology", "Frequency", "Proportion", "Predict")], df2[c("year", "Methodology", "Frequency", "Proportion", "Predict")],
df3[c("year", "Methodology", "Frequency", "Proportion", "Predict")], df4[c("year", "Methodology", "Frequency", "Proportion", "Predict")],
df5[c("year", "Methodology", "Frequency", "Proportion", "Predict")], df6[c("year", "Methodology", "Frequency", "Proportion", "Predict")],
df7[c("year", "Methodology", "Frequency", "Proportion", "Predict")], df8[c("year", "Methodology", "Frequency", "Proportion", "Predict")])
df9$Methodology <- revalue(df9$Methodology, c("FormalModeling" = "Formal",
"AnalyticNonFormal" = "Analytic/Non-Formal",
"PolicyAnalysis" = "Policy Analysis"))
df9$Methodology <- factor(df9$Methodology, levels = c("Quantitative", "Qualitative",
"Formal", "Experimental",
"Descriptive", "Counterfactual",
"Policy Analysis", "Analytic/Non-Formal"))
M <- gvisMotionChart(df9, idvar="Methodology", timevar="year", xvar="Predict")
plot(M)
############################
###Create map of methods to merge###
df <- read.csv("/Users/kelvinabrokwa/Documents/R/Cornut.Data.2011.csv")
names(df)[names(df) == "qg705"] <- "Methodology"
df <- subset(df, select = c(country, Methodology))
df <- df[!(df$Methodology %in% c("")),]
df <- count(df, vars = c("country", "Methodology"))
names(df)[names(df) == "freq"] <- "Frequency"
df <- ddply(.data = df, .variables = .(country), mutate,
Proportion = Frequency/sum(Frequency))
#df1 <- df[(df$Paradigm %in% "Realism"),]
G <- gvisGeoMap(df, locationvar='country' ,numvar='Proportion', hovervar="Methodology",
options=list(dataMode='markers', showZoomOut = FALSE,
colorAxis="{values:[100,250,650,1000],
colors:[\'red', \'pink\', \'orange',\'green']}"))
plot(G)
GM <- gvisMerge(G, M, horizontal=TRUE,
tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
plot(GM)
A <- gvisGeoMap(df, locationvar='country' ,numvar='Proportion', hovervar="Methodology",
options=list(dataMode='regions', datamode = "markers", showZoomOut = FALSE,
colorAxis="{values:[100,250,650,1000],
colors:[\'red', \'pink\', \'orange',\'green']}"))
plot(A)
library(googleVis)
demo(googleVis)
))
)
))
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
library("googleVis", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
))
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300))
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300))
plot(Line)
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300))
plot(Line)
library("googleVis", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300))
plot(Line)
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300))
plot(Line)
library(googleVis)
library(googleVis)
library(zoo)
library(dplyr)
library(plyr)
df <- read.csv("/Users/kelvinabrokwa/Documents/R/Journal Article Database 1.0.csv")
###############Basic motion polt##################
df <- subset(df, select = c(year, Quantitative, Qualitative, FormalModeling, Counterfactual,
AnalyticNonFormal, PolicyAnalysis, Experimental, Descriptive ))
df$Quantitative <- ifelse(df$Quantitative == "Yes", c("Quantitative"), c("No"))
df$Qualitative <- ifelse(df$Qualitative == "Yes", c("Qualitative"), c("No"))
df$FormalModeling <- ifelse(df$FormalModeling == "Yes", c("FormalModeling"), c("No"))
df$Counterfactual <- ifelse(df$Counterfactual == "Yes", c("Counterfactual"), c("No"))
df$AnalyticNonFormal <- ifelse(df$AnalyticNonFormal == "Yes", c("AnalyticNonFormal"), c("No"))
df$Descriptive <- ifelse(df$Descriptive == "Yes", c("Descriptive"), c("No"))
df$PolicyAnalysis <- ifelse(df$PolicyAnalysis == "Yes", c("PolicyAnalysis"), c("No"))
df$Experimental <- ifelse(df$Experimental == "Yes", c("Experimental"), c("No"))
df1 <- count(df, vars = c("year", "Quantitative"))
df2 <- count(df, vars = c("year", "Qualitative"))
df3 <- count(df, vars = c("year", "FormalModeling"))
df4 <- count(df, vars = c("year", "Counterfactual"))
df5 <- count(df, vars = c("year", "AnalyticNonFormal"))
df6 <- count(df, vars = c("year", "Descriptive"))
df7 <- count(df, vars = c("year", "PolicyAnalysis"))
df8 <- count(df, vars = c("year", "Experimental"))
names(df1)[names(df1) == "freq"] <- "Frequency"
names(df2)[names(df2) == "freq"] <- "Frequency"
names(df3)[names(df3) == "freq"] <- "Frequency"
names(df4)[names(df4) == "freq"] <- "Frequency"
names(df5)[names(df5) == "freq"] <- "Frequency"
names(df6)[names(df6) == "freq"] <- "Frequency"
names(df7)[names(df7) == "freq"] <- "Frequency"
names(df8)[names(df8) == "freq"] <- "Frequency"
names(df1)[names(df1) == "Quantitative"] <- "Methodology"
names(df2)[names(df2) == "Qualitative"] <- "Methodology"
names(df3)[names(df3) == "FormalModeling"] <- "Methodology"
names(df4)[names(df4) == "Counterfactual"] <- "Methodology"
names(df5)[names(df5) == "AnalyticNonFormal"] <- "Methodology"
names(df6)[names(df6) == "Descriptive"] <- "Methodology"
names(df7)[names(df7) == "PolicyAnalysis"] <- "Methodology"
names(df8)[names(df8) == "Experimental"] <- "Methodology"
df1 <- ddply(.data = df1, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
df2 <- ddply(.data = df2, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
df3 <- ddply(.data = df3, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
df4 <- ddply(.data = df4, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
df5 <- ddply(.data = df5, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
df6 <- ddply(.data = df6, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
df7 <- ddply(.data = df7, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
df8 <- ddply(.data = df8, .variables = .(year), mutate,
Proportion = Frequency/sum(Frequency))
#combine <- ddply(.data = df7, .variables = .(Frequency), mutate,
#Average = SMA(Frequency, n=3))
df1 <- subset(df1, !( Methodology=="No"))
df2 <- subset(df2, !( Methodology=="No"))
df3 <- subset(df3, !( Methodology=="No"))
df4 <- subset(df4, !( Methodology=="No"))
df5 <- subset(df5, !( Methodology=="No"))
df6 <- subset(df6, !( Methodology=="No"))
df7 <- subset(df7, !( Methodology=="No"))
df8 <- subset(df8, !( Methodology=="No"))
d1 <- loess(Proportion ~ year, df1)
df1$Predict <- predict(d1, df1)
d2 <- loess(Proportion ~ year, df2)
df2$Predict <- predict(d2, df2)
d3 <- loess(Proportion ~ year, df3)
df3$Predict <- predict(d3, df3)
d4 <- loess(Proportion ~ year, df4)
df4$Predict <- predict(d4, df4)
d5 <- loess(Proportion ~ year, df5)
df5$Predict <- predict(d5, df5)
d6 <- loess(Proportion ~ year, df6)
df6$Predict <- predict(d6, df6)
d7 <- loess(Proportion ~ year, df7)
df7$Predict <- predict(d7, df7)
d8 <- loess(Proportion ~ year, df8)
df8$Predict <- predict(d8, df8)
df9 <- rbind.fill(df1[c("year", "Methodology", "Frequency", "Proportion", "Predict")], df2[c("year", "Methodology", "Frequency", "Proportion", "Predict")],
df3[c("year", "Methodology", "Frequency", "Proportion", "Predict")], df4[c("year", "Methodology", "Frequency", "Proportion", "Predict")],
df5[c("year", "Methodology", "Frequency", "Proportion", "Predict")], df6[c("year", "Methodology", "Frequency", "Proportion", "Predict")],
df7[c("year", "Methodology", "Frequency", "Proportion", "Predict")], df8[c("year", "Methodology", "Frequency", "Proportion", "Predict")])
df9$Methodology <- revalue(df9$Methodology, c("FormalModeling" = "Formal",
"AnalyticNonFormal" = "Analytic/Non-Formal",
"PolicyAnalysis" = "Policy Analysis"))
df9$Methodology <- factor(df9$Methodology, levels = c("Quantitative", "Qualitative",
"Formal", "Experimental",
"Descriptive", "Counterfactual",
"Policy Analysis", "Analytic/Non-Formal"))
M <- gvisMotionChart(df9, idvar="Methodology", timevar="year", xvar="Predict")
plot(M)
############################
###Create map of methods to merge###
df <- read.csv("/Users/kelvinabrokwa/Documents/R/Cornut.Data.2011.csv")
names(df)[names(df) == "qg705"] <- "Methodology"
df <- subset(df, select = c(country, Methodology))
df <- df[!(df$Methodology %in% c("")),]
df <- count(df, vars = c("country", "Methodology"))
names(df)[names(df) == "freq"] <- "Frequency"
df <- ddply(.data = df, .variables = .(country), mutate,
Proportion = Frequency/sum(Frequency))
#df1 <- df[(df$Paradigm %in% "Realism"),]
G <- gvisGeoMap(df, locationvar='country' ,numvar='Proportion', hovervar="Methodology",
options=list(dataMode='markers', showZoomOut = FALSE,
colorAxis="{values:[100,250,650,1000],
colors:[\'red', \'pink\', \'orange',\'green']}"))
plot(G)
GM <- gvisMerge(G, M, horizontal=TRUE,
tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
plot(GM)
A <- gvisGeoMap(df, locationvar='country' ,numvar='Proportion', hovervar="Methodology",
options=list(dataMode='regions', datamode = "markers", showZoomOut = FALSE,
colorAxis="{values:[100,250,650,1000],
colors:[\'red', \'pink\', \'orange',\'green']}"))
plot(A)
setwd('/users/kelvinabrokwa/documents/repositories/wm-stats-blog/bid_data/raw_data/')
library(googleVis)
data = read.csv('frat_gpa2.csv',header=TRUE,check.names=FALSE)
data_df <- data.frame(data,check.names=FALSE)
df <- data_df[c(1,2,4,5,8,21)]
line_frat <- gvisLineChart(df, xvar='Time', yvar=colnames(df[-1]),
options=list(
title='Fraternity GPA',
fontSize=11,
hAxis="{textStyle:{fontSize:7.5}}",
width=600,
height=400))
plot(line_frat)
setwd('/users/kelvinabrokwa/documents/repositories/wm-stats-blog/bid_data/raw_data/')
data_sor = read.csv('sor_gpa2.csv',header=TRUE,check.names=FALSE)
data_df_sor <- data.frame(data_sor,check.names=FALSE)
df_sor <- data_df_sor[c(1,6,8,9,10,11)]
line_sor <- gvisLineChart(df_sor, xvar='Time', yvar=colnames(df_sor[-1]),
options=list(
title='Sorority GPA',
fontSize=11,
hAxis="{textStyle:{fontSize:7.5}}",
width=600,
height=400))
plot(line_sor)
setwd('/users/kelvinabrokwa/documents/repositories/wm-stats-blog/bid_data/raw_data/')
library(googleVis)
data <- read.csv('percentage_greek.csv',header=TRUE,check.names=FALSE)
df_bar1 <- data.frame(c(data[1],round(data[-1])),check.names=FALSE)
df_bar2 <- df_bar1[c(1,11,12,8,9)]
bar <- gvisBarChart(df_bar2, xvar="Time", yvar=colnames(df_bar2[-1]),
options=list(title='Population Distribution',
isStacked=TRUE,
fontSize=11,
bars='horizontal',
width=600,
height=500))
plot(bar)
data_men <- read.csv('men_year.csv',header=TRUE,check.names=FALSE)
data_women <- read.csv('women_year.csv',header=TRUE,check.names=FALSE)
df_men <- data.frame(data_men,check.names=FALSE)
df_women <- data.frame(data_women,check.names=FALSE)
df_men_06 <- df_men[c(1,2,5)]
df_women_06 <- df_women[c(1,2,5)]
df1 <- df_men_06[c(-1)]
df2 <- df_women_06[c(-1)]
years <- df_men[1]
all <- data.frame(c(years,df1,df2),check.names=FALSE)
real_all <- all[10:17,]
lines <- gvisLineChart(real_all, xvar='Year', yvar=colnames(all[-1]),
options=list(
title='Percentage of Freshmen Joining Greek Life',
fontSize=11,
width=600,
height=400))
plot(lines)
data <- read.csv('ave_gpa.csv',header=TRUE,check.names=FALSE)
df <- data.frame(data,check.names=FALSE)
lines <- gvisLineChart(df, xvar='Time',yvar=colnames(df[-1]),
options=list(
title='GPA by Semester',
fontSize=11,
width=600,
height=400,
hAxis="{textStyle:{fontSize:7.5}}"
))
plot(lines)
